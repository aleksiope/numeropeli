<!DOCTYPE html>
<html lang="fi">
<head>
  <meta charset="UTF-8">
  <title>Numeropolku 6x6</title>
  <style>
    body { font-family: sans-serif; text-align: center; }
    #grid {
      display: grid;
      grid-template-columns: repeat(6, 60px);
      grid-template-rows: repeat(6, 60px);
      gap: 5px;
      margin: 20px auto;
      width: max-content;
    }
    .cell {
      width: 60px;
      height: 60px;
      border: 1px solid #333;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 20px;
      cursor: pointer;
      background-color: #f0f0f0;
    }
    .cell.filled {
      background-color: #b2f0b2;
      cursor: default;
    }
    #resetBtn {
      margin-top: 10px;
      padding: 8px 16px;
      font-size: 16px;
    }
  </style>
</head>
<body>
  <h1>Numeropolku 6x6</h1>
  <p>Klikkaa ruutuja järjestyksessä 1–36 sääntöjen mukaan.</p>
  <div id="grid"></div>
  <p id="status">Seuraava luku: 1</p>
  <button id="resetBtn">Aloita alusta</button>

  <script>
    const gridSize = 6;
    let currentNumber = 1;
    const grid = document.getElementById('grid');
    const status = document.getElementById('status');
    const resetBtn = document.getElementById('resetBtn');
    const cells = [];

    function initGrid() {
      grid.innerHTML = '';
      cells.length = 0;
      for (let row = 0; row < gridSize; row++) {
        for (let col = 0; col < gridSize; col++) {
          const cell = document.createElement('div');
          cell.classList.add('cell');
          cell.dataset.row = row;
          cell.dataset.col = col;
          grid.appendChild(cell);
          cells.push(cell);
        }
      }
    }

    let path = [];

    function resetGame() {
      currentNumber = 1;
      path = [];
      status.textContent = "Seuraava luku: 1";
      initGrid();
    }

    grid.addEventListener('click', (e) => {
      const cell = e.target;
      if (!cell.classList.contains('cell') || cell.classList.contains('filled')) return;

      const row = parseInt(cell.dataset.row);
      const col = parseInt(cell.dataset.col);

      if (isValidMove(row, col)) {
        cell.textContent = currentNumber;
        cell.classList.add('filled');
        path.push({row, col, number: currentNumber});
        currentNumber++;
        if (currentNumber > 36) {
          status.textContent = "Peli päättyi! Kaikki numerot asetettu.";
        } else {
          status.textContent = `Seuraava luku: ${currentNumber}`;
        }
      } else {
        alert("Virheellinen siirto sääntöjen mukaan!");
      }
    });

    resetBtn.addEventListener('click', resetGame);

    function isValidMove(row, col) {
      if (path.length === 0) return true; // ensimmäinen numero voi mennä mihin vain

      const last = path[path.length - 1];
      const dx = col - last.col;
      const dy = row - last.row;

      // vaakasuuntainen siirto: 3 ruudun päässä (2 tyhjää välissä)
      if (row === last.row && Math.abs(dx) === 3) return true;

      // pystysuuntainen siirto: 3 ruudun päässä (2 tyhjää väliin)
      if (col === last.col && Math.abs(dy) === 3) return true;

      // vinottain: 2 ruudun päässä (1 tyhjä välissä)
      if (Math.abs(dx) === 2 && Math.abs(dy) === 2) return true;

      return false;
    }

    initGrid();
  </script>
</body>
</html>
